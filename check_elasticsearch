#!/bin/sh

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


set -u

PROGNAME=`basename $0`
VERSION="0.4.0"
AUTHOR="Andrew Lyon, Based on Mike Adolphs (http://www.matejunkie.com/) check_nginx.sh code. Authentication support added by Ryan Gallant"

ST_OK=0
ST_WR=1
ST_CR=2
ST_UK=3
epoch=`date +%s`
hostname="localhost"
user=elastic
pass=changeme
authentication="False"
port=9200
status_page="_cluster/health"
output_dir=/tmp
scheme=http
carbon_server=""
carbon_port=""
carbon_key="system.:::name:::.cluster.app.elasticsearch.cluster"
test_mode=no
do_perfdata=no

print_help() {
    cat <<-EOF

	$PROGNAME is a Nagios plugin to check the cluster status of elasticsearch.
	It also parses the status page to get a few useful variables out, and return
	them in the output.

	$PROGNAME -H localhost -P 9200 -o /tmp

	Version: $VERSION

	Options:
	  -h               - show help
	  -v               - show version number
	  -H <hostname>    - defines the hostname. Default is: localhost
	  -P <port>        - defines the port. Default is: 9200
	  -s               - use https (default: http)
	  -o <output-dir>  - where to write tmp-file that the check creates (default: /tmp)
	  -u <username>    - HTTP auth username for elasticsearch. (default: none, noauth)
	  -p <password>    - HTTP auth password for elasticsearch. (default: none, noauth)
	  -a               - HTTP auth - using u/p stored in this file.
	  -t <test/file.json> - suppress wget call, and use pre saved test data (only for development)

EOF
    exit $ST_UK
}

while getopts  "hvH:sP:p:au:o:c:C:k:t:" flag; do
    case ${flag} in
        h)
            print_help
            exit $ST_UK
            ;;
        v)
            print_version $PROGNAME $VERSION
            exit $ST_UK
            ;;
        H)
            hostname=$OPTARG
            ;;
        s)
            scheme=https
            ;;
        P)
            port=$OPTARG
            ;;
        p)
            pass=$OPTARG
            authentication="True"
            ;;
        u)
            user=$OPTARG
            authentication="True"
            ;;
        a)
            authentication="True"
            ;;
        o)
            output_dir=$OPTARG
            ;;
        t)
            filename=$OPTARG
            test_mode="yes"
            ;;
        *)
            echo "Unknown argument: $flag"
            print_help
            exit $ST_UK
            ;;
    esac
done


# Here we go!
for x in wget jq
do
    which $x >/dev/null 2>&1
    if [ "$?" != "0" ]; then
        echo "CRITICAL - $x is not installed"
        exit $ST_CR
    fi
done

if [ "$test_mode" = "no" ]; then
    if [ -x /usr/bin/mktemp ]; then
        filename=$(mktemp -p $output_dir --suffix=elasticsearchnagios)
    else 
        filename=${PROGNAME}-${hostname}-${status_page}.1
        filename=`echo $filename | tr -d '\/'`
        filename=${output_dir}/${filename}
    fi

    if [ "$authentication" = "True" ]; then 
        pass="--password=${pass}"
        user="--user=${user}"
    fi 
    wget -q -t 3 -T 3 ${user} ${pass} "$scheme://${hostname}:${port}/${status_page}?pretty=true" -O ${filename}
fi

if [ ! -s "$filename" ]; then
    echo "CRITICAL - Could not connect to server $hostname"
    exit $ST_CR
fi


name=$( jq -r ".cluster_name" ${filename} )
status=$( jq -r ".status" ${filename} )
timed_out=$( jq -r ".timed_out" ${filename} )
number_nodes=$( jq -r ".number_of_nodes" ${filename} )
number_data_nodes=$( jq -r ".number_of_data_nodes" ${filename} )
active_primary_shards=$( jq -r ".active_primary_shards" ${filename} )
active_shards=$( jq -r ".active_shards" ${filename} )
relocating_shards=$( jq -r ".relocating_shards" ${filename} )
initializing_shards=$( jq -r ".initializing_shards" ${filename} )
delayed_unassigned_shards=$( jq -r ".delayed_unassigned_shards" ${filename} )
unassigned_shards=$( jq -r ".unassigned_shards" ${filename} )

# Determine the Nagios Status and Exit Code
if [ "$status" = "red" ]; then
    NAGSTATUS="CRITICAL"
    EXST=$ST_CR
elif [ "$status" = "yellow" ]; then
    NAGSTATUS="WARNING"
    EXST=$ST_WR
elif [ "$status" = "green" ]; then
    NAGSTATUS="OK"
    EXST=$ST_OK
else
    NAGSTATUS="UNKNOWN"
    EXST=$ST_UK
fi

if [ -z "$name" ]; then
    echo "CRITICAL - Error parsing server output"
    exit $ST_CR
fi

output="elasticsearch ($name) is running. \
status: $status; \
timed_out: $timed_out; \
number_of_nodes: $number_nodes; \
number_of_data_nodes: $number_data_nodes; \
active_primary_shards: $active_primary_shards; \
active_shards: $active_shards; \
relocating_shards: $relocating_shards; \
initializing_shards: $initializing_shards; \
delayed_unassigned_shards: $delayed_unassigned_shards; \
unassigned_shards: $unassigned_shards "

perfdata=""
#perfdata="'idle'=$iproc 'active'=$aproc 'total'=$tproc"
if [ $do_perfdata = "yes" ]; then
    perfdata=" | 'active_primary'=$active_primary_shards 'active'=$active_shards 'relocating'=$relocating_shards 'init'=$initializing_shards 'delay_unass'=$delayed_unassigned_shards 'unass'=$unassigned_shards"
fi

if [ "$test_mode" = "no" -a -f $filename ]; then
    rm -f ${filename}
fi

echo "${NAGSTATUS} - ${output}${perfdata}"
exit $EXST
